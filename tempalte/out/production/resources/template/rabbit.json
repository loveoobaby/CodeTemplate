[{"template":"\n\nimport com.rabbitmq.client.Channel;\nimport com.rabbitmq.client.Connection;\nimport com.rabbitmq.client.ConnectionFactory;\n\nimport java.io.IOException;\nimport java.util.concurrent.TimeoutException;\n\n\npublic class transaction_sender {\n\n\n    public static void main(String[] args) throws IOException, TimeoutException, InterruptedException {\n        String queueName = \"test\";\n\n        ConnectionFactory factory = new ConnectionFactory();\n        factory.setUsername(\"admin\");\n        factory.setPassword(\"admin\");\n        factory.setHost(\"henghe-125\");\n\n        Connection conn = factory.newConnection();\n        Channel channel = conn.createChannel();\n\n        channel.queueDeclare(queueName, true, false, false, null);\n\n        channel.txSelect();\n        for (int i = 0; i < 100000; i++) {\n            try{\n                System.out.println(i);\n                String message = \"\" + System.currentTimeMillis();\n                channel.basicPublish(\"\", queueName, null, message.getBytes());\n                if(i%2==0){\n                    throw new RuntimeException(\"\");\n                }\n                channel.txCommit();\n            }catch (Exception e){\n                channel.txRollback();\n            }\n        }\n\n        channel.close();\n        conn.close();\n\n    }\n\n}","name":"transaction_sender"},{"template":"\n\n\nimport com.rabbitmq.client.Channel;\nimport com.rabbitmq.client.Connection;\nimport com.rabbitmq.client.ConnectionFactory;\n\nimport java.io.IOException;\nimport java.util.concurrent.TimeoutException;\n\npublic class confirm_sender {\n\n    public static void main(String[] args) throws IOException, TimeoutException {\n        String queueName = \"test\";\n        ConnectionFactory factory = new ConnectionFactory();\n        factory.setUsername(\"admin\");\n        factory.setPassword(\"admin\");\n        factory.setHost(\"henghe-125\");\n\n        Connection conn = factory.newConnection();\n        Channel channel = conn.createChannel();\n\n        channel.queueDeclare(queueName, true, false, false, null);\n        channel.confirmSelect();\n\n        for (int i = 0; i < 100000; i++) {\n            String message = \"\" + System.currentTimeMillis();\n            channel.basicPublish(\"\", queueName, null, message.getBytes());\n            try {\n                boolean confirm = channel.waitForConfirms(100);\n                System.out.println(\"confirm result : \" + confirm);\n            } catch (Exception e) {\n                e.printStackTrace();\n            }\n        }\n\n        channel.close();\n        conn.close();\n    }\n\n}","name":"confirm_sender"},{"template":"\n\nimport com.rabbitmq.client.*;\n\nimport java.io.IOException;\nimport java.util.concurrent.TimeoutException;\n\n\npublic class auto_ack {\n\n    private static class BasicConnection {\n        private String userName;\n        private String passwd;\n        private String host;\n        protected Connection connection;\n        protected Channel channel;\n\n        protected BasicConnection(String userName, String passwd, String host){\n            this.userName = userName;\n            this.passwd = passwd;\n            this.host = host;\n        }\n\n        protected void init() throws IOException, TimeoutException {\n            ConnectionFactory factory = new ConnectionFactory();\n            factory.setUsername(userName);\n            factory.setPassword(passwd);\n            factory.setHost(host);\n\n            connection = factory.newConnection();\n            channel = connection.createChannel();\n        }\n\n        public void close() throws IOException, TimeoutException {\n            this.channel.close();\n            this.connection.close();\n        }\n\n\n    }\n\n    private static class Sender extends BasicConnection{\n        private String queueName;\n\n        public Sender(String userName, String passwd, String host, String queueName) throws IOException, TimeoutException {\n            super(userName, passwd, host);\n            this.queueName = queueName;\n            super.init();\n            /**\n             * 队列声明：\n             *     queue：队列名称\n             *     durable： 是否持久化，默认数据放入内存，RabbitMQ重启将丢失数据\n             *     exclusive： 是否排他队列，如果是排他队列：1. 当连接关闭时，队列将被删除；2. 其他消费者不能访问该队列\n             *     autoDelete：当队列的消费者变为0时是否自动删除队列\n             *     arguments：其他的配置参数\n             */\n            channel.queueDeclare(queueName, true, false, false, null);\n        }\n\n\n        public Sender send() throws IOException {\n            for(int i=0;i<1000000;i++){\n                String message = \"\" + i;\n                channel.basicPublish(\"\", queueName, null, message.getBytes());\n            }\n            return this;\n        }\n\n\n    }\n\n\n    private static class Consumer extends BasicConnection {\n        private  String queueName;\n\n\n        public Consumer(String userName, String passwd, String host, String queueName) throws IOException, TimeoutException {\n            super(userName, passwd, host);\n            super.init();\n            this.queueName = queueName;\n            channel.queueDeclare(queueName, true, false, false, null);\n        }\n\n\n        public Consumer consum() throws IOException {\n            DeliverCallback deliverCallback = (consumerTag, delivery) -> {\n                try {\n                    System.out.println(new String(delivery.getBody()));\n                }catch (Exception e){\n                    e.printStackTrace();\n                }\n            };\n            channel.basicConsume(queueName, true, deliverCallback, consumerTag -> {});\n            return this;\n        }\n\n\n\n    }\n\n\n\n\n    public static void main(String[] args) throws IOException, TimeoutException, InterruptedException {\n        Sender sender = new Sender(\"admin\", \"admin\", \"henghe-125\", \"lixj\");\n        sender.send().close();\n\n        new Consumer(\"admin\", \"admin\", \"henghe-125\", \"lixj\").consum();\n    }\n\n}","name":"auto_ack"},{"template":"\n\nimport com.rabbitmq.client.Channel;\nimport com.rabbitmq.client.Connection;\nimport com.rabbitmq.client.ConnectionFactory;\nimport com.rabbitmq.client.DeliverCallback;\n\nimport java.io.IOException;\nimport java.util.concurrent.TimeoutException;\n\n\npublic class manual_ack {\n\n    private static class BasicConnection {\n        private String userName;\n        private String passwd;\n        private String host;\n        protected Connection connection;\n        protected Channel channel;\n\n        protected BasicConnection(String userName, String passwd, String host){\n            this.userName = userName;\n            this.passwd = passwd;\n            this.host = host;\n        }\n\n        protected void init() throws IOException, TimeoutException {\n            ConnectionFactory factory = new ConnectionFactory();\n            factory.setUsername(userName);\n            factory.setPassword(passwd);\n            factory.setHost(host);\n\n            connection = factory.newConnection();\n            channel = connection.createChannel();\n        }\n\n        public void close() throws IOException, TimeoutException {\n            this.channel.close();\n            this.connection.close();\n        }\n\n\n    }\n\n    private static class Sender extends BasicConnection {\n        private String queueName;\n\n        public Sender(String userName, String passwd, String host, String queueName) throws IOException, TimeoutException {\n            super(userName, passwd, host);\n            this.queueName = queueName;\n            super.init();\n            /**\n             * 队列声明：\n             *     queue：队列名称\n             *     durable： 是否持久化，默认数据放入内存，RabbitMQ重启将丢失数据\n             *     exclusive： 是否排他队列，如果是排他队列：1. 当连接关闭时，队列将被删除；2. 其他消费者不能访问该队列\n             *     autoDelete：当队列的消费者变为0时是否自动删除队列\n             *     arguments：其他的配置参数\n             */\n            channel.queueDeclare(queueName, true, false, false, null);\n        }\n\n\n        public Sender send() throws IOException {\n            for(int i=0;i<10000;i++){\n                String message = \"\" + i;\n                channel.basicPublish(\"\", queueName, null, message.getBytes());\n            }\n            return this;\n        }\n\n\n    }\n\n\n    private static class Consumer extends BasicConnection {\n        private  String queueName;\n\n\n        public Consumer(String userName, String passwd, String host, String queueName) throws IOException, TimeoutException {\n            super(userName, passwd, host);\n            super.init();\n            this.queueName = queueName;\n            channel.queueDeclare(queueName, true, false, false, null);\n        }\n\n\n        public Consumer consum() throws IOException {\n            DeliverCallback deliverCallback = (consumerTag, delivery) -> {\n                try {\n                    if(Integer.valueOf(new String(delivery.getBody()))%2 == 0){\n                        throw new RuntimeException(\"\");\n                    }else {\n                        /** 手动应答:\n                         *      deliveryTag: 当前消费消息的Tag\n                         *      multiple: 是否对小于该Tag的消息进行确认，有助于减少确认量，加快消费速度\n                         */\n                        channel.basicAck(delivery.getEnvelope().getDeliveryTag(), false);\n                    }\n                }catch (Exception e){\n                    /** requeue: 消息是否重入队列  */\n                    System.out.println(\"==>\" + new String(delivery.getBody()));\n                    channel.basicNack(delivery.getEnvelope().getDeliveryTag(), false, true);\n                }\n            };\n            channel.basicConsume(queueName, false, deliverCallback, consumerTag -> {});\n            return this;\n        }\n\n    }\n\n\n\n\n    public static void main(String[] args) throws IOException, TimeoutException, InterruptedException {\n        Sender sender = new Sender(\"admin\", \"admin\", \"henghe-125\", \"lixj\");\n        sender.send().close();\n\n        System.out.println(\"begin consume\");\n        new Consumer(\"admin\", \"admin\", \"henghe-125\", \"lixj\").consum();\n    }\n\n\n}","name":"manual_ack"},{"template":"\n\nimport com.rabbitmq.client.Channel;\nimport com.rabbitmq.client.Connection;\nimport com.rabbitmq.client.ConnectionFactory;\nimport com.rabbitmq.client.DeliverCallback;\n\nimport java.io.IOException;\nimport java.util.concurrent.TimeoutException;\n\npublic class topic_mode {\n\n    private static class BasicConnection {\n        private String userName;\n        private String passwd;\n        private String host;\n        protected Connection connection;\n        protected Channel channel;\n\n        protected BasicConnection(String userName, String passwd, String host){\n            this.userName = userName;\n            this.passwd = passwd;\n            this.host = host;\n        }\n\n        protected void init() throws IOException, TimeoutException {\n            ConnectionFactory factory = new ConnectionFactory();\n            factory.setUsername(userName);\n            factory.setPassword(passwd);\n            factory.setHost(host);\n\n            connection = factory.newConnection();\n            channel = connection.createChannel();\n        }\n\n        public void close() throws IOException, TimeoutException {\n            this.channel.close();\n            this.connection.close();\n        }\n\n\n    }\n\n    private static class Sender extends BasicConnection {\n        private String exchangeName;\n        private String routingKey;\n\n        public Sender(String userName, String passwd, String host, String exchangeName, String routingKey) throws IOException, TimeoutException {\n            super(userName, passwd, host);\n            this.exchangeName = exchangeName;\n            super.init();\n            channel.exchangeDeclare(exchangeName, \"topic\");\n            this.routingKey = routingKey;\n        }\n\n        public Sender send() throws IOException {\n            for(int i=0;i<1;i++){\n                String message = \"\" + i;\n                channel.basicPublish(this.exchangeName, routingKey, null, message.getBytes(\"UTF-8\"));\n            }\n            return this;\n        }\n\n\n    }\n\n\n    private static class Consumer extends BasicConnection {\n        private  String queueName;\n\n\n        public Consumer(String userName, String passwd, String host, String queueName, String exChangeName, String routingKey) throws IOException, TimeoutException {\n            super(userName, passwd, host);\n            super.init();\n            this.queueName = queueName;\n            channel.queueDeclare(queueName, true, false, false, null);\n            channel.queueBind(queueName, exChangeName, routingKey);\n        }\n\n\n        public Consumer consum() throws IOException {\n            DeliverCallback deliverCallback = (consumerTag, delivery) -> {\n                try {\n                    System.out.println(\"==>\" + new String(delivery.getBody()));\n                    channel.basicAck(delivery.getEnvelope().getDeliveryTag(), false);\n\n                }catch (Exception e){\n                    /** requeue: 消息是否重入队列  */\n                    channel.basicNack(delivery.getEnvelope().getDeliveryTag(), false, true);\n                }\n            };\n            channel.basicConsume(queueName, false, deliverCallback, consumerTag -> {});\n            return this;\n        }\n\n    }\n\n\n\n\n    public static void main(String[] args) throws IOException, TimeoutException, InterruptedException {\n\n        /**\n         * 如果MQ没有相应的交换机请先建立\n         */\n        System.out.println(\"begin consume\");\n        new Consumer(\"admin\", \"admin\", \"henghe-125\", \"test1\", \"topic_exhange\", \"log.error\").consum();\n        new Consumer(\"admin\", \"admin\", \"henghe-125\", \"test2\", \"topic_exhange\", \"log.info\").consum();\n        new Consumer(\"admin\", \"admin\", \"henghe-125\", \"test3\", \"topic_exhange\", \"log.debug\").consum();\n        new Consumer(\"admin\", \"admin\", \"henghe-125\", \"test4\", \"topic_exhange\", \"log.error\").consum();\n\n        Sender sender = new Sender(\"admin\", \"admin\", \"henghe-125\", \"topic_exhange\", \"log.error\");\n        sender.send().close();\n    }\n}","name":"topic_mode"},{"template":"\n\nimport com.rabbitmq.client.Channel;\nimport com.rabbitmq.client.Connection;\nimport com.rabbitmq.client.ConnectionFactory;\nimport com.rabbitmq.client.DeliverCallback;\n\nimport java.io.IOException;\nimport java.util.concurrent.TimeoutException;\n\n\n/**\n * 发布订阅模式，生产者将消息发送到Exchange，绑定到该Exchange的队列都可以收到消息\n */\npublic class pub_sub_mode {\n\n    private static class BasicConnection {\n        private String userName;\n        private String passwd;\n        private String host;\n        protected Connection connection;\n        protected Channel channel;\n\n        protected BasicConnection(String userName, String passwd, String host){\n            this.userName = userName;\n            this.passwd = passwd;\n            this.host = host;\n        }\n\n        protected void init() throws IOException, TimeoutException {\n            ConnectionFactory factory = new ConnectionFactory();\n            factory.setUsername(userName);\n            factory.setPassword(passwd);\n            factory.setHost(host);\n\n            connection = factory.newConnection();\n            channel = connection.createChannel();\n        }\n\n        public void close() throws IOException, TimeoutException {\n            this.channel.close();\n            this.connection.close();\n        }\n\n\n    }\n\n    private static class Sender extends BasicConnection {\n        private String exchangeName;\n\n        public Sender(String userName, String passwd, String host, String exchangeName) throws IOException, TimeoutException {\n            super(userName, passwd, host);\n            this.exchangeName = exchangeName;\n            super.init();\n            channel.exchangeDeclare(exchangeName, \"fanout\");\n        }\n\n\n        public Sender send() throws IOException {\n            for(int i=0;i<1;i++){\n                String message = \"\" + i;\n                channel.basicPublish(this.exchangeName, \"\", null, message.getBytes(\"UTF-8\"));\n            }\n            return this;\n        }\n\n\n    }\n\n\n    private static class Consumer extends BasicConnection {\n        private  String queueName;\n\n\n        public Consumer(String userName, String passwd, String host, String queueName, String exChangeName) throws IOException, TimeoutException {\n            super(userName, passwd, host);\n            super.init();\n            this.queueName = queueName;\n            channel.queueDeclare(queueName, true, false, false, null);\n            channel.queueBind(queueName, exChangeName, \"\");\n        }\n\n\n        public Consumer consum() throws IOException {\n            DeliverCallback deliverCallback = (consumerTag, delivery) -> {\n                try {\n                    System.out.println(\"==>\" + new String(delivery.getBody()));\n                    channel.basicAck(delivery.getEnvelope().getDeliveryTag(), false);\n\n                }catch (Exception e){\n                    /** requeue: 消息是否重入队列  */\n                    channel.basicNack(delivery.getEnvelope().getDeliveryTag(), false, true);\n                }\n            };\n            channel.basicConsume(queueName, false, deliverCallback, consumerTag -> {});\n            return this;\n        }\n\n    }\n\n\n\n\n    public static void main(String[] args) throws IOException, TimeoutException, InterruptedException {\n\n        System.out.println(\"begin consume\");\n        new Consumer(\"admin\", \"admin\", \"henghe-125\", \"test1\", \"test_exhange\").consum();\n        new Consumer(\"admin\", \"admin\", \"henghe-125\", \"test2\", \"test_exhange\").consum();\n        new Consumer(\"admin\", \"admin\", \"henghe-125\", \"test3\", \"test_exhange\").consum();\n        new Consumer(\"admin\", \"admin\", \"henghe-125\", \"test4\", \"test_exhange\").consum();\n\n        Sender sender = new Sender(\"admin\", \"admin\", \"henghe-125\", \"test_exhange\");\n        sender.send().close();\n    }\n\n\n}","name":"pub_sub_mode"}]